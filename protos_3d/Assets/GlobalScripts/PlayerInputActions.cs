//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/GlobalScripts/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""FPS_Player"",
            ""id"": ""724a28b8-5655-4997-a6db-380fdb9ddc2f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5834971d-b3de-443a-8b8c-0763b68a37a4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""db8e51c2-3d02-4d09-8e37-4cdb182aa90e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c5437c6f-c763-40be-9134-a1253f270a1b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""L_Attack"",
                    ""type"": ""Button"",
                    ""id"": ""c0434f08-b951-4919-97dd-fd85711d94cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""373cd878-bc03-48c3-9b9c-70f53ae8720d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""770d0c40-b841-462b-a068-fcabd0e625dd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f66806af-6e06-4c18-b8bd-6f997b457d43"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4e67272b-cb78-442a-90bd-1f029afcd2dd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ffa03b2f-7dcd-48a2-b52f-ec0e37157025"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9152a1bc-5e1f-45a7-a1aa-c7f46eb3d166"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd412516-f402-4bcf-93cb-eb7367242454"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b3a118c-aa6f-43d6-8e34-af6442a47033"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""L_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPS_Player
        m_FPS_Player = asset.FindActionMap("FPS_Player", throwIfNotFound: true);
        m_FPS_Player_Movement = m_FPS_Player.FindAction("Movement", throwIfNotFound: true);
        m_FPS_Player_Jump = m_FPS_Player.FindAction("Jump", throwIfNotFound: true);
        m_FPS_Player_MouseMove = m_FPS_Player.FindAction("MouseMove", throwIfNotFound: true);
        m_FPS_Player_L_Attack = m_FPS_Player.FindAction("L_Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPS_Player
    private readonly InputActionMap m_FPS_Player;
    private IFPS_PlayerActions m_FPS_PlayerActionsCallbackInterface;
    private readonly InputAction m_FPS_Player_Movement;
    private readonly InputAction m_FPS_Player_Jump;
    private readonly InputAction m_FPS_Player_MouseMove;
    private readonly InputAction m_FPS_Player_L_Attack;
    public struct FPS_PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public FPS_PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_FPS_Player_Movement;
        public InputAction @Jump => m_Wrapper.m_FPS_Player_Jump;
        public InputAction @MouseMove => m_Wrapper.m_FPS_Player_MouseMove;
        public InputAction @L_Attack => m_Wrapper.m_FPS_Player_L_Attack;
        public InputActionMap Get() { return m_Wrapper.m_FPS_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPS_PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IFPS_PlayerActions instance)
        {
            if (m_Wrapper.m_FPS_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnJump;
                @MouseMove.started -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnMouseMove;
                @MouseMove.performed -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnMouseMove;
                @MouseMove.canceled -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnMouseMove;
                @L_Attack.started -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnL_Attack;
                @L_Attack.performed -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnL_Attack;
                @L_Attack.canceled -= m_Wrapper.m_FPS_PlayerActionsCallbackInterface.OnL_Attack;
            }
            m_Wrapper.m_FPS_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
                @L_Attack.started += instance.OnL_Attack;
                @L_Attack.performed += instance.OnL_Attack;
                @L_Attack.canceled += instance.OnL_Attack;
            }
        }
    }
    public FPS_PlayerActions @FPS_Player => new FPS_PlayerActions(this);
    public interface IFPS_PlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
        void OnL_Attack(InputAction.CallbackContext context);
    }
}
